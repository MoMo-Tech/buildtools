SHELL := /bin/sh

CHIBIOS := ../sc/ChibiOS
# <!-- START OF GENERATED VARIABLES
CSRCS := \
$(CHIBIOS)/os/common/startup/ARMCMx/compilers/GCC/crt1.c \
$(CHIBIOS)/os/common/startup/ARMCMx/compilers/GCC/vectors.c \
$(CHIBIOS)/os/hal/src/hal.c \
$(CHIBIOS)/os/hal/src/hal_buffers.c \
$(CHIBIOS)/os/hal/src/hal_queues.c \
$(CHIBIOS)/os/hal/src/hal_mmcsd.c \
$(CHIBIOS)/os/hal/src/hal_adc.c \
$(CHIBIOS)/os/hal/src/hal_can.c \
$(CHIBIOS)/os/hal/src/hal_dac.c \
$(CHIBIOS)/os/hal/src/hal_ext.c \
$(CHIBIOS)/os/hal/src/hal_gpt.c \
$(CHIBIOS)/os/hal/src/hal_i2c.c \
$(CHIBIOS)/os/hal/src/hal_i2s.c \
$(CHIBIOS)/os/hal/src/hal_icu.c \
$(CHIBIOS)/os/hal/src/hal_mac.c \
$(CHIBIOS)/os/hal/src/hal_mmc_spi.c \
$(CHIBIOS)/os/hal/src/hal_pal.c \
$(CHIBIOS)/os/hal/src/hal_pwm.c \
$(CHIBIOS)/os/hal/src/hal_qspi.c \
$(CHIBIOS)/os/hal/src/hal_rtc.c \
$(CHIBIOS)/os/hal/src/hal_sdc.c \
$(CHIBIOS)/os/hal/src/hal_serial.c \
$(CHIBIOS)/os/hal/src/hal_serial_usb.c \
$(CHIBIOS)/os/hal/src/hal_spi.c \
$(CHIBIOS)/os/hal/src/hal_st.c \
$(CHIBIOS)/os/hal/src/hal_uart.c \
$(CHIBIOS)/os/hal/src/hal_usb.c \
$(CHIBIOS)/os/hal/src/hal_wdg.c \
$(CHIBIOS)/os/hal/ports/common/ARMCMx/nvic.c \
$(CHIBIOS)/os/hal/ports/STM32/STM32F7xx/hal_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/STM32F7xx/hal_ext_lld_isr.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/ADCv2/hal_adc_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/CANv1/hal_can_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/EXTIv1/hal_ext_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/DMAv2/stm32_dma.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/MACv1/hal_mac_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/RTCv2/hal_rtc_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/SDMMCv1/hal_sdc_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/SPIv2/hal_i2s_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/SPIv2/hal_spi_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/TIMv1/hal_icu_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/USARTv2/hal_serial_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/USARTv2/hal_uart_lld.c \
$(CHIBIOS)/os/hal/ports/STM32/LLD/xWDGv1/hal_wdg_lld.c \
${CHIBIOS}/os/hal/osal/rt/osal.c \
$(CHIBIOS)/os/rt/src/chsys.c \
$(CHIBIOS)/os/rt/src/chdebug.c \
$(CHIBIOS)/os/rt/src/chvt.c \
$(CHIBIOS)/os/rt/src/chschd.c \
$(CHIBIOS)/os/rt/src/chthreads.c \
$(CHIBIOS)/os/rt/src/chtm.c \
$(CHIBIOS)/os/rt/src/chstats.c \
$(CHIBIOS)/os/rt/src/chregistry.c \
$(CHIBIOS)/os/rt/src/chsem.c \
$(CHIBIOS)/os/rt/src/chmtx.c \
$(CHIBIOS)/os/rt/src/chcond.c \
$(CHIBIOS)/os/rt/src/chevents.c \
$(CHIBIOS)/os/rt/src/chmsg.c \
$(CHIBIOS)/os/rt/src/chdynamic.c \
$(CHIBIOS)/os/common/oslib/src/chmboxes.c \
$(CHIBIOS)/os/common/oslib/src/chmemcore.c \
$(CHIBIOS)/os/common/oslib/src/chheap.c \
$(CHIBIOS)/os/common/oslib/src/chmempools.c \
$(CHIBIOS)/os/common/ports/ARMCMx/chcore.c \
$(CHIBIOS)/os/common/ports/ARMCMx/chcore_v7m.c \
${CHIBIOS}/test/lib/ch_test.c \
${CHIBIOS}/test/rt/source/test/test_root.c \
${CHIBIOS}/test/rt/source/test/test_sequence_001.c \
${CHIBIOS}/test/rt/source/test/test_sequence_002.c \
${CHIBIOS}/test/rt/source/test/test_sequence_003.c \
${CHIBIOS}/test/rt/source/test/test_sequence_004.c \
${CHIBIOS}/test/rt/source/test/test_sequence_005.c \
${CHIBIOS}/test/rt/source/test/test_sequence_006.c \
${CHIBIOS}/test/rt/source/test/test_sequence_007.c \
${CHIBIOS}/test/rt/source/test/test_sequence_008.c \
${CHIBIOS}/test/rt/source/test/test_sequence_009.c \
${CHIBIOS}/test/rt/source/test/test_sequence_010.c \
${CHIBIOS}/test/rt/source/test/test_sequence_011.c \
${CHIBIOS}/test/rt/source/test/test_sequence_012.c \
../cfg/board/board.c \
../appl/userinterface/main.c

CXXSRCS := 

SSRCS := \
$(CHIBIOS)/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S \
$(CHIBIOS)/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S

LDSCRIPTS := \
../sc/linker/STM32F746xG_MAX.ld

INCDIRS := \
$(CHIBIOS)/os/common/startup/ARMCMx/compilers/GCC \
$(CHIBIOS)/os/common/startup/ARMCMx/devices/STM32F7xx \
$(CHIBIOS)/os/common/ext/CMSIS/include \
$(CHIBIOS)/os/common/ext/CMSIS/ST/STM32F7xx \
$(CHIBIOS)/os/hal/include \
$(CHIBIOS)/os/hal/ports/common/ARMCMx \
$(CHIBIOS)/os/hal/ports/STM32/STM32F7xx \
$(CHIBIOS)/os/hal/ports/STM32/LLD/ADCv2 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/CANv1 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/DACv1 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/DMAv2 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/EXTIv1 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/GPIOv2 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/I2Cv2 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/MACv1 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/OTGv1 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/RTCv2 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/SDMMCv1 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/SPIv2 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/TIMv1 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/USARTv2 \
$(CHIBIOS)/os/hal/ports/STM32/LLD/xWDGv1 \
${CHIBIOS}/os/hal/osal/rt \
$(CHIBIOS)/os/rt/include \
$(CHIBIOS)/os/common/oslib/include \
$(CHIBIOS)/os/common/ports/ARMCMx \
$(CHIBIOS)/os/common/ports/ARMCMx/compilers/GCC \
${CHIBIOS}/test/rt \
$(CHIBIOS)/os/various \
${CHIBIOS}/test/lib \
${CHIBIOS}/test/rt/source/test \
${CHIBIOS}/os/license \
../cfg/hal \
../cfg/os \
../cfg/board \
../cfg \
../appl \
../appl/userinterface \
../appl/misc

CDIRS := 

CXXDIRS := 

SDIRS := 

USERLIBS :=
USEROBJS :=
# <!-- END OF GENERATED VARIABLES

# Project relevant defines
MCU := cortex-m7
PROJNAME := stm32f746ng-discovery

PROJEXEC := 
PROJMAP := 

PROJDEF := -DTHUMB_PRESENT -DTHUMB_NO_ITERWORKING -mno-thumb-interwork

# Enables the use of FPU (no, softfp, hard).
USE_FPU := hard

ifeq ($(USE_FPU),)
  USE_FPU = no
endif

ifneq ($(USE_FPU),no)
  FPU_OPT := -mfloat-abi=$(USE_FPU) -mfpu=fpv5-sp-d16 -fsingle-precision-constant
  PROJDEF += -DCORTEX_USE_FPU=TRUE
else
  FPU_OPT :=
  PROJDEF += -DCORTEX_USE_FPU=FALSE
endif

GENERAL_OPT := -O2 -ggdb -fomit-frame-pointer -falign-functions=16

CFLAGS := -c -mcpu=$(MCU) -mthumb -Wextra -Wall \
           $(GENERAL_OPT) \
 		   -fmessage-length=0 -fsigned-char \
 		   -ffunction-sections -fdata-sections -fno-common \
 		   -ffreestanding -fno-move-loop-invariants -flto \
		   -std=gnu11 \
		   $(PROJDEF) \
		   $(FPU_OPT)
CXXFLAGS := -c -mcpu=$(MCU) -mthumb -Wextra \
             $(GENERAL_OPT) \
		     -fmessage-length=0 -fsigned-char \
		     -ffunction-sections -fdata-sections -fno-common \
		     -ffreestanding -fno-move-loop-invariants -fno-rtti \
			 -std=gnu++11 -fabi-version=0 \
			 $(PROJDEF) \
			 $(FPU_OPT)

ASFLAGS := -c -mcpu=$(MCU) -mthumb -Wextra -x assembler-with-cpp \
		   $(GENERAL_OPT) \
		   -fmessage-length=0 -fsigned-char \
		   -ffunction-sections -fdata-sections -fno-common \
		   -ffreestanding -fno-move-loop-invariants -flto \
		   $(PROJDEF) \
		   $(FPU_OPT)

LDFLAGS = -mcpu=$(MCU) -mthumb -Wextra -nostartfiles -Xlinker --gc-sections --specs=nano.specs \
		    $(GENERAL_OPT) \
		    -fmessage-length=0 -fsigned-char \
		    -ffunction-sections -fdata-sections -fno-common \
		    -ffreestanding -fno-move-loop-invariants -flto \
		    $(LDDIRS) \
		    $(LDLIST) \
		    $(FPU_OPT) \
		    -Wl,-Map,$(call WIN_PATH,$(abspath $(OUTDIR)/$(PROJNAME).map)),--defsym=__main_stack_size__=0x400,--defsym=__process_stack_size__=0x400 \
		    -o $(call WIN_PATH,$(abspath $(OUTDIR)/$(PROJNAME).elf)) \
		    $(addsuffix /*.o, $(call WIN_PATH,$(abspath $(OBJDIR)))) \
		    $(foreach userobj, $(abspath $(USEROBJS)), $(call WIN_PATH,$(userobj))) \
		    $(foreach userlib, $(abspath $(USERLIBS)), $(call WIN_PATH,$(userlib)))

CPPFLAGS =

CPFLAGS = 
FPFLAGS = 

ODFLAGS := -S -x --syms

RELINCLIST := $(addprefix -I, $(INCDIRS))

INCLIST := $(addprefix -I, $(foreach dir, $(abspath $(INCDIRS)), $(call WIN_PATH,$(dir))))
LDLIST := $(addprefix -T, $(foreach script, $(abspath $(LDSCRIPTS)), $(call WIN_PATH,$(script))))
LDDIRS := $(addprefix -L, $(foreach script, $(abspath $(LDSCRIPTS)), $(call WIN_PATH,$(dir $(script)))))

# General path defines
ROOTDIR := $(abspath ..)
OUTDIR := $(ROOTDIR)/out
OBJDIR := $(ROOTDIR)/obj
TMPDIR := $(ROOTDIR)/tmp

ABSOBJDIR := $(call WIN_PATH,$(abspath $(OBJDIR)))
ABSOUTDIR := $(call WIN_PATH,$(abspath $(OUTDIR)))

ABSASMSRCS := $(foreach src, $(abspath $(SSRCS)), $(call WIN_PATH,$(src)))
ABSCSRCS := $(foreach src, $(abspath $(CSRCS)), $(call WIN_PATH,$(src)))
ABSCXXSRCS := $(foreach src, $(abspath $(CXXSRCS)), $(call WIN_PATH,$(src)))

# Define the compiler/tools variables here
CC := arm-none-eabi-gcc 
CXX := arm-none-eabi-g++ 
LD := arm-none-eabi-gcc 
AS := arm-none-eabi-gcc 
OD := arm-none-eabi-objdump 
CP := arm-none-eabi-objcopy 
FP := 
SZ := arm-none-eabi-size 

USE_ECLIPSE := yes
