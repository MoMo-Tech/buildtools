SHELL := /bin/sh

CURRENT_DIR := $(shell pwd)

export CURRENT_DIR

-include $(BUILD_OPT)

START_TIMESTAMP := $(shell date +%s)

# Common variables
export INCLIST LDLIST TMPDIR OBJDIR NO_OF_JOBS TARGET CPPFLAGS ABSOBJDIR ABSOUTDIR
# S compilation variables
export CC CFLAGS CSRCS ABSCSRCS
# C compilation variables
export AS ASFLAGS SSRCS ABSASMSRCS
# CPP compilation variables
export CXX CXXFLAGS CXXSRCS ABSCXXSRCS

# Continue from here
.PHONY: all build rebuild link disasm filling $(START_TIMESTAMP)
.SILENT:

all: rebuild

rebuild: build_start project_setup clean_obj_out build

build: build_start project_setup clean_tmp src_to_obj link disasm elf_to_bin elf_to_hex summary

clean: clean_obj_out clean_tmp

src_to_obj:		
	@$(MAKE) -S $(NO_OF_JOBS) -Otarget -f $(TS_PATH)/cjobs c_src_to_obj
	@$(MAKE) -S $(NO_OF_JOBS) -Otarget -f $(TS_PATH)/cxxjobs cxx_src_to_obj
	@$(MAKE) -S $(NO_OF_JOBS) -Otarget -f $(TS_PATH)/asmjobs s_src_to_obj
	
summary:
	@echo
	@echo -e "\033[1;34m___________________________________________________________________\033[0m"
	@echo -e "\033[1;34m__________________________ Build summary __________________________\033[0m"
	@echo -e "\033[1;34m___________________________________________________________________\033[0m"
	@echo

	@find $(TMPDIR) -iname "*.warn" -exec \
		bash -c \
		'filepath="{}"; \
	     echo -e "\033[1;33m__________________________ $$(basename $$filepath .warn) __________________________\033[0m"; \
		 cat {}; \
		 echo "";' \;

	@echo -e "\033[1;34m___________________________________________________________________\033[0m"
	@echo -e "\033[1;34mThe build process took: \033[0m\033[1;36m$(shell expr $(shell date +%s) - $(START_TIMESTAMP)) sec\033[0m\033[1;34m on [$(shell date +%c)] with \033[0m\033[1;36m$(subst -j,,$(NO_OF_JOBS))\033[0m\033[1;34m job(s)\033[0m"
	@echo
	@echo

link:
	@echo
	@echo -n Linking files ...
	@echo Linker command line: $(LD) $(LDFLAGS) > $(TMPDIR)/linker.log
	@echo >> $(TMPDIR)/linker.log
	@echo >> $(TMPDIR)/linker.log
	@bash -c 'if ! $(LD) $(LDFLAGS) &>> $(TMPDIR)/linker.log; then \
		mv $(TMPDIR)/linker.log $(TMPDIR)/linker.error; \
		echo -e " [\033[1;31mERROR\033[0m]"; \
		echo ""; \
		echo -e "\033[1;31m__________________________ $$(notdir $1) __________________________\033[0m"; \
		echo "" >> $(TMPDIR)/linker.error; \
		if [ -f $(TMPDIR)/linker.err ]; then \
			cat $(TMPDIR)/linker.err >> $(TMPDIR)/linker.error; \
		fi; \
		rm -f $(TMPDIR)/linker.err; \
		cat $(TMPDIR)/linker.error; \
		echo ""; \
		exit 2; \
	elif grep -q "warning" $(TMPDIR)/linker.log; then \
		mv $(TMPDIR)/linker.log $(TMPDIR)/linker.warn; \
		echo -e " [\033[1;33mWARNING\033[0m]"; \
	else \
		echo -e " [\033[1;32mFINISHED\033[0m]"; \
	fi; \
	exit' || (exit 2)

disasm: $(OUTDIR)/$(PROJNAME).elf
	@echo
	@echo -n Disassembling source ...
	@$(OD) $(ODFLAGS) $(shell echo -n "$(OUTDIR)/$(PROJNAME).elf" | sed -e "s/\/cygdrive\/\(.\)/\1:/g" -) > $(shell echo -n "$(OUTDIR)/$(PROJNAME).lst" | sed -e "s/\/cygdrive\/\(.\)/\1:/g" -)
	@echo -e " [\033[1;32mFINISHED\033[0m]"

elf_to_bin: $(OUTDIR)/$(PROJNAME).elf
	@echo -n Creating binary $(PROJNAME).bin ...
	@$(CP) -Obinary $(shell echo -n "$(OUTDIR)/$(PROJNAME).elf" | sed -e "s/\/cygdrive\/\(.\)/\1:/g" -) $(shell echo -n "$(OUTDIR)/$(PROJNAME).bin" | sed -e "s/\/cygdrive\/\(.\)/\1:/g" -)
	@echo -e " [\033[1;32mFINISHED\033[0m]"

elf_to_hex: $(OUTDIR)/$(PROJNAME).elf
	@echo -n Creating hex $(PROJNAME).hex ...
	@$(CP) -Oihex $(shell echo -n "$(OUTDIR)/$(PROJNAME).elf" | sed -e "s/\/cygdrive\/\(.\)/\1:/g" -) $(shell echo -n "$(OUTDIR)/$(PROJNAME).hex" | sed -e "s/\/cygdrive\/\(.\)/\1:/g" -)
	@echo -e " [\033[1;32mFINISHED\033[0m]"

filling: $(OUTDIR)/$(PROJNAME).s19
	@echo -n Running filling for $(PROJNAME).s19 ...
	@cp $(OUTDIR)/$(PROJNAME).s19 $(OUTDIR)/$(PROJNAME).sx
	@$(FP) $(FPFLAGS) > $(TMPDIR)/filling.log
	@mv $(OUTDIR)/$(PROJNAME).sx $(OUTDIR)/$(PROJNAME)_Unfilled.s19
	@echo -e " [\033[1;32mFINISHED\033[0m]"

clean_obj_out:
	@echo -n INFO :- Cleaning the /obj and /out directory ...
	@rm -f $(OBJDIR)/*
	@rm -f $(OUTDIR)/*
	@echo -e " [\033[1;32mFINISHED\033[0m]"

clean_tmp:
	@echo -n INFO :- Cleaning the /tmp directory ...
	@rm -f $(TMPDIR)/*
	@echo -e " [\033[1;32mFINISHED\033[0m]"
	@echo

project_setup:
	@echo -n INFO :- Checking directory structure ...
	@mkdir -p $(OBJDIR)
	@mkdir -p $(OUTDIR)
	@mkdir -p $(TMPDIR)
	@echo -e " [\033[1;32mFINISHED\033[0m]"

build_start: 
	@echo -e "\033[1;34m___________________________________________________________________\033[0m"
	@echo -e "\033[1;34mBuild process started on [$(shell date +%c)]\033[0m\n"